(*  FeedBack Control Circuits 30/04/2020 *)

directive declare 

(* LBS: directive sample 720000.0 10000 *)
directive simulation {
    initial=0;                   // Initial simulation time (default 0)
    final=10000;                 // Final simulation time (200 horas)
    points=10000;                // Number of simulation points to plot (default 1000)
    //plots=[<xh x1^ x2 x3^>;<yh y1^ y2 y3^>]; 
    plots=[<h x1^ x2 x3^>;<h x1_^ x2' x3_^>]; // plot annihilation
    kinetics = Contextual; 
}

(* Determinístico *)
directive simulator deterministic

directive compilation infinite

(* Length default of 5 nucleotides to toeholds and 20nt to recognition domains *)
directive lengths 5 20

(* LBS: rate constants 20 Celsius *)
directive parameters [
    tb=1E-3;      // padrão do artigo c = 1E-3       
    tub=1E+1;  
    c = 8E-4;     // padrão do artigo c = 8E-4    
]


(* Enable leaks and sets the rate of all leak reactions (default is 10-9 nM1s1) *)
//directive leaks
directive leak 5E-9     // rate constant of leak - 5E-9

(* Sets the migration rate of a single nucleotide (default is 8000 s1) *)
directive migrate 20   

//____________________________ Domínios_________________
(* Domains *)
dom x1 = {bind=tb;unbind=tub;colour="red"}
dom x3 = {bind=tb;unbind=tub;colour="red"}
dom x1_ = {bind=tb;unbind=tub;colour="red"} //annihilation
dom x3_ = {bind=tb;unbind=tub;colour="red"} //annihilation
dom y1 = {bind=tb;unbind=tub;colour="green"} //catalysis
dom y3 = {bind=tb;unbind=tub;colour="green"} //catalysis

//___________________________Espécies_____________________
(* Degradation *)
def Degradation(N, x2) = N * {x1^(c)*}[x2 x3^] 

(* Annihilation *)
def Annihilation_a(N, x2, x2') = N * {x1^*}[x2 x3^ x1_^]:[x2' x3_^]    
def Annihilation_b(N, x2) = N * <x2 x3^ x1_^>     
def Annihilation_c(N, x2', x2) = N * {x1_^*}[x2' x3_^ x1^]:[x2 x3^]
def Annihilation_d(N, x2') = N * <x2' x3_^ x1^>

(* Catalysis *)
def Catalysis_a(N, x2, yh, xh) = N * {x1^(c)*}[x2 x3^]<yh y1^ xh x1^>    
def Catalysis_b(N, yh, y2, xh, x2) = N * {x3^*}[yh y1^]<y2 y3^>:[xh x1^]<x2 x3^> 

(* Entradas *)
def X(N, xh, x2) = N * <xh x1^ x2 x3^> // entrada degradation, annihilation e catalysis              
def X'(N, h, x2') = N * <h x1_^ x2' x3_^> // entrada annihilation

(* Espécies *)
def Y(N, yh, y2) = N * <yh y1^ y2 y3^>

//_________________________________________ Blocos___________________
(* Degradation block *)
def Degradation_(Cmax, cx, xh, x2) =
(       
        Degradation(Cmax, x2)
    |   X(cx, xh, x2)
)

(*Annihilation block*)
def Annihilation(Cmax, cx, cx', h, x2, x2') =
(       
        Annihilation_a(Cmax, x2, x2')
    |   Annihilation_b(Cmax, x2)
    |   Annihilation_c(Cmax, x2', x2)
    |   Annihilation_d(Cmax, x2')
    |   X(cx, h, x2)
    |   X'(cx', h, x2')
)

(*Ctalysis block*)
def Catalysis(Cmax, cx, xh, yh, x2, y2) =
(       
        Catalysis_a(Cmax, x2, yh, xh)
    |   Catalysis_b(Cmax, yh, y2, xh, x2)
    |   X(cx, xh, x2)
    |   Y(0, yh, y2)
)
//---------------------------- Run Tests -------------------------------------

(* Unique domain (new) - The declaration of domains using new is similar to the declaration
using dom, except that the domain Identifier is assumed to be unique to a given process *)

    new xh  new yh
    new x2  new y2  new x2'
    new h  

(* Teste annihilation *) 
    def Cmax = 1000            
    def cx = 2  
    def cx' = 1          


(   
    //Degradation_(Cmax, cx, xh, x2)
    Annihilation(Cmax, cx, cx', h, x2, x2')
    //Catalysis(Cmax, cx, xh, yh, x2, y2)

)
