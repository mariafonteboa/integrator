(*  FeedBack Control Circuits 30/04/2020 
Catálise: u -> u + x *)
(* chamar tudo o que antes era X de u, chamar que antes Y por X*)
(* LBS: directive sample 720000.0 10000 *)

directive simulation {
    initial=0;                   // Initial simulation time (default 0)
    final=2000;                 // Final simulation time (200 horas)
    points=10000;                // Number of simulation points to plot (default 1000)
    //plots=[<uh_ u1_^ u2_ u3_^>;<xh x1_^ x2_ x3_^>]; //Plot Catalisys_
    //plots=[<uh u1^ u2 u3^>;<xh x1^ x2 x3^>]; //Plot catalysis
    plots=[[U()]-[U_()]; [X()]-[X_()]]; //Plot Catalysis + Annihilation
    kinetics = Contextual; 
}

(* Determinístico *)
directive simulator deterministic

directive compilation infinite

(* Length default of 5 nucleotides to toeholds and 20nt to recognition domains *)
directive lengths 5 20

(* LBS: rate constants 20 Celsius *)
directive parameters [
    tb=0.001;      // padrão do artigo = 1E-3      
    tub=1E+1;  
    c = 0.01;     // padrão do artigo c = 8E-4    
    //cx = 2;
    //cx_ = 1;
]


(* Enable leaks and sets the rate of all leak reactions (default is 10-9 nM1s1) *)
//directive leaks
directive leak 5E-9     // rate constant of leak - 5E-9

(* Sets the migration rate of a single nucleotide (default is 8000 s1) *)
directive migrate 20   

(* Domains Catálise + *)
dom u1 = {bind=tb;unbind=tub;colour="red"}
dom u3 = {bind=tb;unbind=tub;colour="red"}
dom x1 = {bind=tb;unbind=tub;colour="green"}
dom x3 = {bind=tb;unbind=tub;colour="green"}

(* Domains Catálise- *)
dom u1_ = {bind=tb;unbind=tub;colour="red"}
dom u3_ = {bind=tb;unbind=tub;colour="red"}
dom x1_ = {bind=tb;unbind=tub;colour="green"}
dom x3_ = {bind=tb;unbind=tub;colour="green"}

(* Annihilation *)
def Annihilation_a(N, x2, x2_) = N * {x1^*}[x2 x3^ x1_^]:[x2_ x3_^]    
def Annihilation_b(N, x2) = N * <x2 x3^ x1_^>     
def Annihilation_c(N, x2_, x2) = N * {x1_^*}[x2_ x3_^ x1^]:[x2 x3^]
def Annihilation_d(N, x2') = N * <x2_ x3_^ x1^>

(* Catalysis Catálise+*)
def Catalysis_a(N, u2, xh, uh) = N * {u1^(c)*}[u2 u3^]<xh x1^ uh u1^>    
def Catalysis_b(N, xh, x2, uh, u2) = N * {u3^*}[xh x1^]<x2 x3^>:[uh u1^]<u2 u3^>     

(* Catalysis Catálise-*)
def Catalysis_a_(N, u2_, xh, uh_) = N * {u1_^(c)*}[u2_ u3_^]<xh x1_^ uh_ u1_^>    
def Catalysis_b_(N, xh, x2_, uh_, u2_) = N * {u3_^*}[xh x1_^]<x2_ x3_^>:[uh_ u1_^]<u2_ u3_^>

(* Entradas Catálise+*)
def U(N, uh, u2) = N * <uh u1^ u2 u3^>

(* Entradas Catálise-*)
def U_(N, uh_, u2_) = N * <uh_ u1_^ u2_ u3_^>

(* Espécies Catálise +*)
def X(N, xh, x2) = N * <xh x1^ x2 x3^>

(* Espécies Catálise ⁻*)
def X_(N, xh, x2_) = N * <xh x1_^ x2_ x3_^>

(* Catalysis + block *)

def Catalysis(Cmax, cx, uh, xh, u2, x2) =
(       
        Catalysis_a(Cmax, u2, xh, uh)
    |   Catalysis_b(Cmax, xh, x2, uh, u2)
    |   U(cx, uh, u2)
    |   X(0, xh, x2)
)

(* Catalysis - block *)

def Catalysis_(Cmax_, cx_, uh_, xh, u2_, x2_) =
(       
        Catalysis_a_(Cmax_, u2_, xh, uh_)
    |   Catalysis_b_(Cmax_, xh, x2_, uh_, u2_)
    |   U_(cx_, uh_, u2_)
    |   X_(0, xh, x2_)
)

(*Annihilation block*)
def Annihilation(Cmax, x2, x2_) =
(       
        Annihilation_a(Cmax, x2, x2_)
    |   Annihilation_b(Cmax, x2)
    |   Annihilation_c(Cmax, x2_, x2)
    |   Annihilation_d(Cmax, x2_)
)
//---------------------------- Run Tests -------------------------------------

(* Unique domain (new) - The declaration of domains using new is similar to the declaration
using dom, except that the domain Identifier is assumed to be unique to a given process *)

    new uh  new xh  new uh_ new u2_
    new u2  new x2  new x2_

(* Teste annihilation *) 
    def Cmax = 1000   
    def Cmax_ = 1000      
    
   def cx = 2
   def cx_ = 1   

(   
     Catalysis(Cmax, cx, uh, xh, u2, x2)
    | Catalysis_(Cmax_, cx_, uh_, xh, u2_, x2_)
    | Annihilation(Cmax, x2, x2_)
)
